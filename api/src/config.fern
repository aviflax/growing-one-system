{vase/plugins  [gos.world gos.db]

 vase/service  (fern/lit vase/service
                         {:apis        [@api-v1]
                          :service-map @http-options})

 http-options  {:io.pedestal.http/resource-path  "/public"
                :io.pedestal.http/port           3000
                :io.pedestal.http/join?          false
                :io.pedestal.http/secure-headers {:content-security-policy-settings {:object-src "none"}}}

 api-v1        (fern/lit vase/api
                         {:path          "/v1"
                          :expose-api-at "/v1/api.edn"
                          :on-startup    [@datomic-cloud @world-attrs @user-attrs @user-seed @observations]
                          :on-request    [@datomic-cloud
                                          @io.pedestal.http/transit-json-body]
                          :routes        @api.v1/routes})

 datomic-cloud (fern/lit gos.db/adapter
                 {:type          :cloud
                  :client-config @client-config
                  :db-name       "development"})

 client-config {:server-type   :ion
                :region        "us-east-2"
                :system        "nygard-solo-dev"
                :creds-profile "gos"
                :endpoint      "http://entry.nygard-solo-dev.us-east-2.datomic.net:8182/"
                :proxy-port    8182}

 environment   :development

 api.v1/routes #{["/hello"         :get (fern/lit vase/respond {:body {:message "Hi there"}})]
                 ["/w/:world/meta" :get (fern/lit vase.datomic.cloud/query {:query  [:find (pull ?e [*])
                                                                                     :in $ ?world
                                                                                     :where [?e :world/name ?world]]
                                                                            :params [:world]})]
                 ["/w/:world/accept" :post [@io.pedestal.http.body-params/body-params gos.world/accept]]
                 ["/w"               :get (fern/lit vase.datomic.cloud/query {:query [:find (pull ?e [:world/name :world/ident])
                                                                                      :in $
                                                                                      :where [?e :world/ident]]})]}

 world-attrs   (fern/lit vase.datomic.cloud/attributes
                         [:world/ident :one :string :unique "A globally (universally?) unique identifier for a world."]
                         [:world/name :one :string "A world name. Only unique within a user or organization"])
 observations  (fern/lit vase.datomic.cloud/attributes
                         [:datum/reported-by :one :ref "The user who reported this datum"])
 user-attrs    (fern/lit vase.datomic.cloud/attributes
                         [:user/name :one :string :identity "The globally unique name of the user"])
 user-seed     (fern/lit vase.datomic.cloud/tx {:user/name "ga"})}
